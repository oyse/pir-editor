grammar org.dadacoalition.pireditor.Pir hidden( NONE_NL_WS, COMMENT, POD_COMMENT, NL ) 

generate pir "http://www.dadacoalition.org/pireditor/Pir"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore



File:
    (
        statements+=Statement |
        subroutines+=SubDef
    )* ;
    
Statement hidden( NONE_NL_WS, COMMENT, POD_COMMENT ):
    ( directives+=Directive |
      (label=Label SEMICOLON NL* )? instructions+=Instruction ) NL+;

Directive:
    LocalDirective |
    NamespaceDirective |
    LexDirective |
    ConstDirective |
    LoadlibDirective |
    HLLDirective |
    LineDirective |
    FileDirective |
    AnnotateDirective |
    IncludeDirective |
    ParamDirective |
    TailcallDirective |
    ReturnDirective |
    AnyDirective
    ;    


Instruction hidden( NONE_NL_WS, COMMENT, POD_COMMENT ):
    Assignment |
    OpcodeInvocation |
    FunctionCall |
    MethodCall |
    Conditional |
    GotoStatement |
    NULL (VARIABLE|NamedVariable)
    ;

Conditional:
    CONDITION_KW ConditionExpression GotoStatement;
    
ConditionExpression:
    VARIABLE |
    NamedVariable |
    ( UnaryOperator (VARIABLE|NamedVariable)) |
    ( (VARIABLE|NamedVariable) BinaryOperator (VARIABLE|NamedVariable) ) |
    NULL (VARIABLE|NamedVariable);

GotoStatement:
    GOTO (Label|STRING);

Assignment hidden( NONE_NL_WS, COMMENT, POD_COMMENT ):
    (VARIABLE|NamedVariable) 
    (EQUAL_OPERATOR | ASSIGNMENT_OPERATOR)
        ( VARIABLE |
          Constant
          UnaryOperator VARIABLE |
          VARIABLE BinaryOperator VARIABLE |
          VARIABLE '[' VARIABLE ']' |
          FunctionCall |
          MethodCall |
          OpcodeInvocation
    );

FunctionCall hidden():
    (STRING | PARROTID) LEFT_PARENS NONE_NL_WS* ArgumentList RIGHT_PARENS;

ArgumentList:
    (Argument (NONE_NL_WS* COMMA NONE_NL_WS* Argument)*)?;

MethodCall hidden():
    (VARIABLE|NamedVariable) DOT_OPERATOR FunctionCall;

OpcodeInvocation:
    Opcode (OpcodeArgument (COMMA OpcodeArgument)*)?;
    
Opcode:
    PARROTID;

OpcodeArgument:
    VARIABLE | NamedVariable | Constant | Namespace;

Argument hidden( NONE_NL_WS ):
    (STRING FAT_ARROW)? 
    (VARIABLE | Constant | NamedVariable | Namespace) 
    ArgumentModifier?;

ArgumentModifier hidden():
    SEMICOLON PARROTID;

UnaryOperator:
    '!' | '-' | '~'; 

BinaryOperator:
    '+' | '-' | '*' | '/' | '%' | '**' |
    DOT_OPERATOR |
    '<<' | '>>' | '>>>' |
    '&&' | '||' | '~~' |
    '&' | '|' | '~' |
    RELATION_OPERATOR;  
    
Label:
    PARROTID;

SubDef hidden( NONE_NL_WS, COMMENT, POD_COMMENT):
    SubStartDirective name=(PARROTID|STRING) ( SEMICOLON modifiers+=SubModifier)* NL+
    (statements+=Statement)*   
    NL? SubEndDirective;

SubModifier:
    'main' |
    'load' |
    'init' |
    'anon' |
    'immediate' |
    'postcomp' |
    'method' ( LEFT_PARENS STRING RIGHT_PARENS )? |
    'vtable' |
    'outer' LEFT_PARENS PARROTID RIGHT_PARENS |
    'subid' LEFT_PARENS STRING RIGHT_PARENS |
    'instanceof' LEFT_PARENS STRING RIGHT_PARENS |
    'nsentry' LEFT_PARENS STRING RIGHT_PARENS 
    ;

LocalDirective hidden():
    DOT_OPERATOR 'local' 
    NONE_NL_WS+ type=TYPE 
    NONE_NL_WS+ NamedVariable (NONE_NL_WS* COMMA NONE_NL_WS* NamedVariable)* 
    (NONE_NL_WS+ ':uniquereq')?;
    
IncludeDirective hidden():
    DOT_OPERATOR 'include' NONE_NL_WS+ STRING;

NamespaceDirective hidden():
    DOT_OPERATOR 'namespace' NONE_NL_WS+ Namespace;    

Namespace hidden( NONE_NL_WS ):
    '[' (STRING (';' STRING)?)? ']';

LexDirective hidden():
    DOT_OPERATOR 'lex' NONE_NL_WS+ NamedVariable NONE_NL_WS+ '$P' INT;

ConstDirective hidden():
    DOT_OPERATOR 'const' NONE_NL_WS+ 
    TYPE PARROTID NONE_NL_WS+ 
    EQUAL_OPERATOR NONE_NL_WS* 
    Constant;

LoadlibDirective hidden():
    DOT_OPERATOR 'loadlib' NONE_NL_WS+ STRING;
    
HLLDirective hidden():
    DOT_OPERATOR 'HLL' NONE_NL_WS+ STRING;
    
LineDirective hidden():
    DOT_OPERATOR 'line' NONE_NL_WS+ INT;
    
FileDirective hidden():
    DOT_OPERATOR 'file' NONE_NL_WS+ STRING;
    
AnnotateDirective hidden():
    DOT_OPERATOR 'annotate' NONE_NL_WS+ STRING NONE_NL_WS+ Constant;

ParamDirective hidden():
    DOT_OPERATOR 'param' NONE_NL_WS+ 
    TYPE NONE_NL_WS+ 
    NamedVariable (NONE_NL_WS* COMMA NONE_NL_WS* NamedVariable)* (NONE_NL_WS+ ParamModifier)*;

SubStartDirective hidden():
    DOT_OPERATOR 'sub';
    
SubEndDirective hidden():
    DOT_OPERATOR 'end';

TailcallDirective hidden():
    DOT_OPERATOR 'tailcall' NONE_NL_WS+ FunctionCall;

ReturnDirective hidden():
    DOT_OPERATOR 'return' (NONE_NL_WS* ReturnArguments)?;    

ReturnArguments hidden(NONE_NL_WS):
    LEFT_PARENS 
            ((VARIABLE | Constant | NamedVariable | Namespace)
            ( COMMA (VARIABLE | Constant | NamedVariable | Namespace) )*)?         
    RIGHT_PARENS; 

AnyDirective:
    DOT_OPERATOR PARROTID;

ParamModifier hidden():
    SEMICOLON PARROTID (NONE_NL_WS* LEFT_PARENS NONE_NL_WS* STRING NONE_NL_WS* RIGHT_PARENS)?;
    
Constant:
    ((SEMICOLON Encoding)?SEMICOLON Charset)? STRING |    
    INT;

Charset:
    'ascii' | 'binary' | 'unicode' | 'iso-8859-1';

Encoding:
    'utf8';    
    


NamedVariable :
    PARROTID;
   
terminal COMMENT :
    '#' !('\n'|'\r')* ('\r'? '\n')?;   

terminal POD_COMMENT :
    ('=pod'      |
     '=head1'    |
     '=head2'    |
     '=head3'    |
     '=head4'    |
     '=over'     |
     '=item'     |
     '=back'     |
     '=begin'    |
     '=end'      |
     '=for'      |
     '=encoding') -> 
    '=cut' NL;

terminal RELATION_OPERATOR:
    '<' | '<=' | '==' | '!=' | '>=' | '>';

terminal EQUAL_OPERATOR:
    '=';

terminal ASSIGNMENT_OPERATOR:
    '+=' | '-=' | '*=' | '/=' | '%=' | '.=' | '&=' | '|=' | '~=' | '<<=' | '>>=' | '>>>='; 

terminal DOT_OPERATOR:
    '.';
    
terminal NL:
    ('\r'? '\n');

terminal VARIABLE:
    '$P' INT |
    '$I' INT |
    '$N' INT |
    '$S' INT ;
   
terminal INT returns ecore::EInt: ('0'..'9')+;

terminal GOTO:
    'goto';

terminal CONDITION_KW:
    'if' | 'unless';
    
terminal NULL:
    'null';

terminal TYPE :
    'int' |
    'num' |
    'string' |
    'pmc';

terminal PARROTID :  
    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
    ;

terminal COMMA:
    ',';

terminal LEFT_PARENS:
    '(';
    
terminal RIGHT_PARENS:
    ')';

terminal FAT_ARROW:
    '=>';

terminal SEMICOLON:
    ':';

terminal STRING: 
            '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
            "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
        ; 

terminal NONE_NL_WS:
    (' '|'\t' )+; 

terminal ANY_OTHER: 
    .;    